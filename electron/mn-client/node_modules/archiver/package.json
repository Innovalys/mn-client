{
  "name": "archiver",
  "version": "0.15.0-1",
  "description": "a streaming interface for archive generation",
  "homepage": "https://github.com/archiverjs/node-archiver",
  "author": {
    "name": "Chris Talkington",
    "url": "http://christalkington.com/"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/archiverjs/node-archiver.git"
  },
  "bugs": {
    "url": "https://github.com/archiverjs/node-archiver/issues"
  },
  "license": "MIT",
  "main": "index.js",
  "files": [
    "index.js",
    "lib"
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "mocha --reporter dot",
    "bench": "node benchmark/simple/pack-zip.js"
  },
  "dependencies": {
    "archiver-json": "~0.1.0",
    "archiver-tar": "~0.1.0",
    "archiver-zip": "~0.1.0",
    "async": "~0.9.0",
    "buffer-crc32": "~0.2.1",
    "glob": "~4.3.0",
    "lazystream": "~0.1.0",
    "lodash": "~3.2.0",
    "readable-stream": "~1.0.26",
    "tar-stream": "~1.1.0",
    "zip-stream": "~0.5.0"
  },
  "devDependencies": {
    "chai": "~2.0.0",
    "mocha": "~2.1.0",
    "rimraf": "~2.2.8",
    "mkdirp": "~0.5.0",
    "stream-bench": "~0.1.2",
    "tar": "~1.0.3",
    "yauzl": "~2.2.1"
  },
  "keywords": [
    "archive",
    "archiver",
    "stream",
    "zip",
    "tar"
  ],
  "publishConfig": {
    "registry": "https://registry.npmjs.org/"
  },
  "readme": "# Archiver v0.15.0-1 [![Build Status](https://travis-ci.org/archiverjs/node-archiver.svg?branch=master)](https://travis-ci.org/archiverjs/node-archiver) [![Build status](https://ci.appveyor.com/api/projects/status/38kqu3yp159nodxe/branch/master?svg=true)](https://ci.appveyor.com/project/ctalkington/node-archiver/branch/master)\n\na streaming interface for archive generation\n\n[![NPM](https://nodei.co/npm/archiver.png)](https://nodei.co/npm/archiver/)\n\n## Install\n\n```bash\nnpm install archiver --save\n```\n\n## Usage\n\n```js\nvar archiver = require('archiver');\nvar archive = archiver.create('zip', {}); // or archiver('zip', {});\n```\n\n## API\n\n#### Transform\n\nInherits [Transform Stream](http://nodejs.org/api/stream.html#stream_class_stream_transform) methods.\n\n#### create(format, options)\n\nCreates an Archiver instance based on the format (zip, tar, etc) passed. Parameters can be passed directly to `Archiver` constructor for convenience.\n\n#### abort()\n\nAborts the archiving process, taking a best-effort approach, by:\n\n* removing any pending queue tasks\n* allowing any active queue workers to finish\n* detaching internal module pipes\n* ending both sides of the Transform stream\n\n*It will NOT drain any remaining sources.*\n\n#### append(input, data)\n\nAppends an input source (text string, buffer, or stream) to the instance. When the instance has received, processed, and emitted the input, the `entry` event is fired.\n\nReplaced `#addFile` in v0.5.\n\n```js\narchive.append('string', { name:'string.txt' });\narchive.append(new Buffer('string'), { name:'buffer.txt' });\narchive.append(fs.createReadStream('mydir/file.txt'), { name:'stream.txt' });\narchive.append(null, { name:'dir/' });\n```\n\n#### bulk(mappings)\n\nAppends multiple entries from passed array of src-dest mappings. A [lazystream](https://github.com/jpommerening/node-lazystream) wrapper is used to prevent issues with open file limits.\n\nGlobbing patterns are supported through use of the bundled [file-utils](https://github.com/SBoudrias/file-utils) module.\n\nThe `data` property can be set (per src-dest mapping) to define data for matched entries.\n\n```js\narchive.bulk([\n  { src: ['mydir/**'], data: { date: new Date() } },\n  { src: ['mydir/**'], data: function(data) {\n    data.date = new Date();\n    return data;\n  }},\n  { expand: true, cwd: 'mydir', src: ['**'], dest: 'newdir' }\n]);\n```\n\nAs of v0.15, the `data` property can also be a function that receives data for each matched entry and is expected to return it after making any desired adjustments.\n\nFor more detail on this feature, please see [BULK.md](https://github.com/archiverjs/node-archiver/blob/master/BULK.md).\n\n#### directory(dirpath[, destpath, data])\n\nAppends a directory and its files, recusively, given its dirpath. This is meant to be a simplier approach to something previously only possible with `bulk`. The use of `destpath` allows one to define a custom destination path within the resulting archive and `data` allows for setting data on each entry appended.\n\n```js\n// mydir/ -> archive.ext/mydir/\narchive.directory('mydir');\n\n// mydir/ -> archive.ext/abc/\narchive.directory('mydir', 'abc');\n\n// mydir/ -> archive.ext/\narchive.directory('mydir', false, { date: new Date() });\narchive.directory('mydir', false, function(data) {\n  data.date = new Date();\n  return data;\n});\n```\n\nAs of v0.15, the `data` property can also be a function that receives data for each entry and is expected to return it after making any desired adjustments.\n\n#### file(filepath, data)\n\nAppends a file given its filepath using a [lazystream](https://github.com/jpommerening/node-lazystream) wrapper to prevent issues with open file limits. When the instance has received, processed, and emitted the file, the `entry` event is fired.\n\n```js\narchive.file('mydir/file.txt', { name:'file.txt' });\n```\n\n#### finalize()\n\nFinalizes the instance and prevents further appending to the archive structure (queue will continue til drained). The `end`, `close` or `finish` events on the destination stream may fire right after calling this method so you should set listeners beforehand to properly detect stream completion.\n\n*You must call this method to get a valid archive and end the instance stream.*\n\n#### pointer()\n\nReturns the current byte length emitted by archiver. Use this in your end callback to log generated size.\n\n#### use(plugin)\n\nAdd a plugin to the middleware stack. Currently this is designed for passing the module to use (replaces registerFormat/setFormat/setModule)\n\n## Events\n\nInherits [Transform Stream](http://nodejs.org/api/stream.html#stream_class_stream_transform) events.\n\n#### entry\n\nFired when the entry's input has been processed and appended to the archive. Passes entry data as first argument.\n\n## Zip\n\n### Options\n\n#### comment `string`\n\nSets the zip comment.\n\n#### statConcurrency `number`\n\nSets the number of workers used to process the internal fs stat queue. Defaults to 4.\n\n#### store `boolean`\n\nIf true, all entries will be archived without compression. Defaults to `false`.\n\n#### zlib `object`\n\nPassed to node's [zlib](http://nodejs.org/api/zlib.html#zlib_options) module to control compression. Options may vary by node version.\n\n### Entry Data\n\n#### name `string` `required`\n\nSets the entry name including internal path.\n\n#### date `string|Date`\n\nSets the entry date. This can be any valid date string or instance. Defaults to current time in locale.\n\nWhen using the `bulk` or `file` methods, fs stat data is used as the default value.\n\n#### store `boolean`\n\nIf true, this entry will be archived without compression. Defaults to global `store` option.\n\n#### comment `string`\n\nSets the entry comment.\n\n#### mode `number`\n\nSets the entry permissions. Defaults to octal 0755 (directory) or 0644 (file).\n\nWhen using the `bulk` or `file` methods, fs stat data is used as the default value.\n\n#### stats `fs.Stats`\n\nSets the fs stat data for this entry. This allows for reduction of fs stat calls when stat data is already known.\n\n## Tar\n\n### Options\n\n#### gzip `boolean`\n\nCompresses the tar archive using gzip, default is false.\n\n#### gzipOptions `object`\n\nPassed to node's [zlib](http://nodejs.org/api/zlib.html#zlib_options) module to control compression. Options may vary by node version.\n\n#### statConcurrency `number`\n\nSets the number of workers used to process the internal fs stat queue. Defaults to 4.\n\n### Entry Data\n\n#### name `string` `required`\n\nSets the entry name including internal path.\n\n#### date `string|Date`\n\nSets the entry date. This can be any valid date string or instance. Defaults to current time in locale.\n\nWhen using the `bulk` or `file` methods, fs stat data is used as the default value.\n\n#### mode `number`\n\nSets the entry permissions. Defaults to octal 0755 (directory) or 0644 (file).\n\nWhen using the `bulk` or `file` methods, fs stat data is used as the default value.\n\n#### stats `fs.Stats`\n\nSets the fs stat data for this entry. This allows for reduction of fs stat calls when stat data is already known.\n\n## Custom Formats\n\nArchiver ships with out of the box support for TAR and ZIP archives. You can register additional formats with `registerFormat`.\n\n## Libraries\n\nArchiver makes use of several libraries/modules to avoid duplication of efforts.\n\n- [zip-stream](https://npmjs.org/package/zip-stream)\n- [tar-stream](https://npmjs.org/package/tar-stream)\n\n## Things of Interest\n\n- [Examples](https://github.com/archiverjs/node-archiver/blob/master/examples)\n- [Changelog](https://github.com/archiverjs/node-archiver/releases)\n- [Contributing](https://github.com/archiverjs/node-archiver/blob/master/CONTRIBUTING.md)\n- [MIT License](https://github.com/archiverjs/node-archiver/blob/master/LICENSE-MIT)",
  "readmeFilename": "README.md",
  "_id": "archiver@0.15.0-1",
  "_shasum": "8ed0259bddaf73bd312eaddb8cce1ddec58bb61a",
  "_from": "archiver",
  "_resolved": "file:archiver"
}
